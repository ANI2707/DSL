#include<bits/stdc++.h>
using namespace std;

int prec(char c){
    if(c=='^'){
        return 3;
    }
    else if(c=='/' || c=='*'){
        return 2;
    }
    else if(c=='+' || c=='-'){
        return 1;
    }
    else{
        return -1;
    }
}

string infixtopostfix(string s){
    stack <char> st;
    string result;
    for(int i=0;i<s.length();i++){
        char c=s[i];
        if(c>='a' && c<='z'|| c>='A' && c<='Z'|| c>='0' && c<='9'){
            result+=c;
        }
        else if(c=='('){
            st.push('(');
        }
        else if(c==')'){
            while(st.top()!='('){
                result+=st.top();
                st.pop();
            }
            st.pop();
        }
        else{
            while(!st.empty() && prec(s[i])<=prec(st.top())){
                result+=st.top();
                st.pop();
            }
            st.push(c);
        }
    }
    while(!st.empty()){
        result+=st.top();
        st.pop();
    }
    return result;
}

int evaluation(string s){
    stack <int> st;
    for(int i=0;i<s.length();i++){
        char c=s[i];
        if(c>='0' && c<='9'){
            int temp=(int)(c- '0');
            st.push(temp);
        }
        else{
            int op1=st.top();
            st.pop();
            int op2=st.top();
            st.pop();
            switch(c){
                case '+':
                st.push(op2+op1);
                break;
                case '-':
                st.push(op2-op1);
                break;
                case '*':
                st.push(op2*op1);
                break;
                case '/':
                st.push(op2/op1);
                break;
            }
            
        }
    }
    return st.top();
}
int main(){
    string infix,postfix;
	cout<<"Enter the infix Expression:";
	cin>>infix;
	int ch;
	do{
	    cout<<"\n1.Infix to Postfix\n2.Evaluation of postfix\n3.Exit";
	    cout<<"\nEnter a choice:";
	    cin>>ch;
	    switch(ch){
	        case 1:
	        postfix=infixtopostfix(infix);
	        cout<<"Postflix Expression:"<<postfix;
	        break;
	        case 2:
	        cout<<"Evaluation:"<<evaluation(postfix);
	        break;
	    }
	    
	}
	while(ch!=3);
	return 0;

}


